# handlers/send.py

import logging
from uuid import uuid4
from datetime import datetime

from telegram import Update
from telegram.ext import ContextTypes

from utils.storage import CHECKLISTS, DYNAMIC, user_progress
from config.config import REPORT_CHAT_IDS
from handlers.checklist import send_checklist

logger = logging.getLogger(__name__)

async def send_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /send <–Ω–∞–∑–≤–∞–Ω–∏–µ>
    –∏ —Å—Ä–∞–∑—É –ø—É–±–ª–∏–∫—É–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —á–µ–∫-–ª–∏—Å—Ç –≤ —ç—Ç–æ–º –∂–µ —á–∞—Ç–µ.
    """
    chat_id = update.effective_chat.id
    args = context.args  # –≤—Å—ë, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ –ø–æ—Å–ª–µ /send

    # 1) –ü—Ä–æ–≤–µ—Ä—å–ª–∏, —á—Ç–æ —É–∫–∞–∑–∞–Ω –∞—Ä–≥—É–º–µ–Ω—Ç
    if not args:
        return await update.message.reply_text(
            "‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /send <–Ω–∞–∑–≤–∞–Ω–∏–µ_—á–µ–∫–ª–∏—Å—Ç–∞>\n"
            "–ü—Ä–∏–º–µ—Ä: /send –û—Ç–∫—Ä—ã—Ç–∏–µ"
        )

    # 2) –û–ø—Ä–µ–¥–µ–ª—è–µ–º ¬´–º–µ—Å—Ç–æ¬ª –ø–æ —Ç–µ–∫—É—â–µ–º—É —á–∞—Ç—É
    #    (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –±–æ—Ç —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–∞—Ö –¢–≤–µ—Ä—Å–∫–∞—è –∏ –ü–æ–∫—Ä–æ–≤–∫–∞)
    place = None
    for p, cid in REPORT_CHAT_IDS.items():
        if cid == chat_id:
            place = p
            break
    if not place:
        return await update.message.reply_text(
            "‚ùó –≠—Ç–æ—Ç —á–∞—Ç –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫-–ª–∏—Å—Ç–æ–≤."
        )

    name = " ".join(args)  # –Ω–∞–∑–≤–∞–Ω–∏–µ —á–µ–∫-–ª–∏—Å—Ç–∞ –º–æ–∂–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–ª–æ–≤
    logger.info("–í—ã–∑–æ–≤ —á–µ–∫-–ª–∏—Å—Ç–∞ %s –¥–ª—è —á–∞–π–Ω–æ–π %s (—á–∞—Ç %s)", name, place, chat_id)

    # 3) –ò—â–µ–º –≤ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö
    items = CHECKLISTS.get(place, {}).get(name)
    prefix = "static"
    tpl_id = name

    # 4) –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –∏—â–µ–º –≤ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ø–æ title
    if items is None:
        dyn = next((d for d in DYNAMIC if d["place"] == place and d["title"] == name), None)
        if dyn:
            items = dyn["items"]
            prefix = "dynamic"
            tpl_id = dyn["id"]

    if items is None:
        return await update.message.reply_text(f"‚ùó –ß–µ–∫-–ª–∏—Å—Ç ¬´{name}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è ¬´{place}¬ª.")

    # 5) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
    ck_id = uuid4().hex[:8]
    context.user_data["ck_id"] = ck_id
    title = name
    user_progress[ck_id] = {
        "place": place,
        "user": update.effective_user.full_name,
        "title": title,
        "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "items": items,
        "status": [None] * len(items),
        "chat_id": chat_id,
        "message_id": None,
    }

    # 6) –ü—É–±–ª–∏–∫—É–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    sent = await update.message.reply_text(
        f"üìù *{title}*\n–ù–∞—á–∞–ª–æ: {user_progress[ck_id]['timestamp']}",
        parse_mode="Markdown"
    )
    user_progress[ck_id]["message_id"] = sent.message_id

    # 7) –†–∏—Å—É–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —á–µ–∫-–ª–∏—Å—Ç
    await send_checklist(context.bot, ck_id)
