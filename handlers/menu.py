# handlers/menu.py

import logging
from uuid import uuid4
from datetime import datetime

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes

from utils.storage import CHECKLISTS, DYNAMIC, user_progress
from config.config import REPORT_CHAT_IDS
from handlers.checklist import send_checklist

logger = logging.getLogger(__name__)

# --- –®–∞–≥ 1: –°—Ç–∞—Ä—Ç (–∫–æ–º–∞–Ω–¥–∞ /start) ---
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ —Å –≤—ã–±–æ—Ä–æ–º —á–∞–π–Ω–æ–π.
    """
    keyboard = [
        [InlineKeyboardButton(place, callback_data=f"place|{place}")]
        for place in CHECKLISTS.keys()
    ]
    await update.message.reply_text(
        "üëã *–í—ã–±–µ—Ä–∏—Ç–µ —á–∞–π–Ω—É—é:*",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


# --- –®–∞–≥ 2: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ ¬´place|<place>¬ª ---
async def place_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–ª—É—á–∞–µ—Ç callback_data="place|<place>",
    —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ —á–µ–∫-–ª–∏—Å—Ç—ã.
    """
    query = update.callback_query
    await query.answer()

    # –†–∞–∑–±–∏—Ä–∞–µ–º –º–µ—Å—Ç–æ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    _, place = query.data.split("|", 1)
    context.user_data["place"] = place

    # –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–∫–∏
    static_names = list(CHECKLISTS.get(place, {}).keys())
    dynamic_items = [d for d in DYNAMIC if d["place"] == place]

    # –°—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É: —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ
    keyboard = []
    for name in static_names:
        keyboard.append([
            InlineKeyboardButton(name, callback_data=f"static|{place}|{name}")
        ])
    # –∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ
    for tpl in dynamic_items:
        keyboard.append([
            InlineKeyboardButton(tpl["title"], callback_data=f"dynamic|{place}|{tpl['id']}")
        ])
    # –∫–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –º–µ—Å—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    keyboard.append([
        InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="back|main")
    ])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º/—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await query.edit_message_text(
        f"üè† *–ß–µ–∫-–ª–∏—Å—Ç—ã –¥–ª—è* _{place}_:",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


# --- –®–∞–≥ 3: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ ¬´static|‚Ä¶¬ª –∏–ª–∏ ¬´dynamic|‚Ä¶¬ª ---
async def checklist_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()


    # –õ–æ–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏: –∫–∞–∫–∞—è data –ø—Ä–∏—Ö–æ–¥–∏—Ç –æ—Ç –∫–Ω–æ–ø–∫–∏
    logger.info("checklist_handler called with data=%s", query.data)


    # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data
    try:
        prefix, place, ident = query.data.split("|", 2)
    except ValueError:
        await query.edit_message_text("‚ùó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø—É–Ω–∫—Ç—ã —á–µ–∫-–ª–∏—Å—Ç–∞
    if prefix == "static":
        items = CHECKLISTS.get(place, {}).get(ident)
        title = ident  # –ø—Ä–æ—Å—Ç–æ –∏–º—è —à–∞–±–ª–æ–Ω–∞ ‚Äî –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
    else:  # dynamic
        tpl = next((d for d in DYNAMIC if d["id"] == ident and d["place"] == place), None)
        if not tpl:
            await query.edit_message_text("‚ùó –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —á–µ–∫-–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        items = tpl["items"] 
        title = tpl["title"]

    if not items:
        await query.edit_message_text("‚ùó –ß–µ–∫-–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return



    # –°–æ–∑–¥–∞—ë–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–µ—Å—Å–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    from uuid import uuid4
    from datetime import datetime
    ck_id = uuid4().hex[:8]

    context.user_data["ck_id"] = ck_id
    """
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    chat_id = REPORT_CHAT_IDS.get(place)

    """

    user_progress[ck_id] = {
        "place": place,
        "user": query.from_user.full_name,
        "title": title,
        "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "items": items,
        "status": [None] * len(items),
        "chat_id": REPORT_CHAT_IDS.get(place),
        "message_id": None,
    }

    # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—É–±–ª–∏–∫—É–µ–º –≤ —á–∞—Ç —á–∞–π–Ω–æ–π
    await query.edit_message_text("‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ–∫-–ª–∏—Å—Ç–∞‚Ä¶")
    sent = await context.bot.send_message(
        chat_id=user_progress[ck_id]["chat_id"],
        text=f"üìù *{title}*\n–ù–∞—á–∞—Ç–æ: {user_progress[ck_id]['timestamp']}",
        parse_mode="Markdown"
    )
    user_progress[ck_id]["message_id"] = sent.message_id

    # –†–∏—Å—É–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —á–µ–∫-–ª–∏—Å—Ç
    await send_checklist(context.bot, ck_id)


# --- –®–∞–≥ 4: –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —á–∞–π–Ω–æ–π ---
async def back_to_main(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await start_command(update, context)  # –ø—Ä–æ—Å—Ç–æ –∑–∞–Ω–æ–≤–æ –≤—ã–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ä—Ç
