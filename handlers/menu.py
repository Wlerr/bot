# handlers/menu.py

import json
from uuid import uuid4
from datetime import datetime

from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from utils.storage import CHECKLISTS, user_progress
from config.config import REPORT_CHAT_IDS
from handlers.checklist import send_checklist

async def place_handler(update: "telegram.Update", context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_data="place|<–ù–∞–∑–≤–∞–Ω–∏–µ>"
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é —á–∞–π–Ω—É—é –≤ context.user_data –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å —á–µ–∫-–ª–∏—Å—Ç.
    """
    query = update.callback_query
    await query.answer()

    # –ø–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞–π–Ω–æ–π
    place = query.data.split("|", 1)[1]
    context.user_data["place"] = place

    # —Å—Ç—Ä–æ–∏–º –∫–Ω–æ–ø–∫–∏ —Å –∏–º–µ–Ω–∞–º–∏ —á–µ–∫-–ª–∏—Å—Ç–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —á–∞–π–Ω–æ–π
    keyboard = [
        [InlineKeyboardButton(cl_name, callback_data=f"checklist|{cl_name}")]
        for cl_name in CHECKLISTS[place].keys()
    ]

    await query.edit_message_text(
        text=f"üè† –í—ã –≤—ã–±—Ä–∞–ª–∏ —á–∞–π–Ω—É—é *{place}*. –í—ã–±–µ—Ä–∏—Ç–µ —á–µ–∫-–ª–∏—Å—Ç:",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def checklist_handler(update: "telegram.Update", context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_data="checklist|<–ò–º—è —á–µ–∫-–ª–∏—Å—Ç–∞>"
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Å—Å–∏—é, –ø—É–±–ª–∏–∫—É–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —á–µ–∫-–ª–∏—Å—Ç –≤ –æ–±—â–µ–º —á–∞—Ç–µ,
    —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç chat_id –∏ message_id –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ—Ç—Ä–∏—Å–æ–≤–∫—É.
    """
    query = update.callback_query
    await query.answer()

    place = context.user_data.get("place")
    checklist_name = query.data.split("|", 1)[1]
    if place is None:
        # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π ‚Äî –µ—Å–ª–∏ place –ø–æ—Ç–µ—Ä—è–ª—Å—è
        await query.edit_message_text("‚ùó –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —á–∞–π–Ω—É—é –∫–æ–º–∞–Ω–¥–æ–π /start")
        return

    # —Å–æ–∑–¥–∞—ë–º –∫–æ—Ä–æ—Ç–∫–∏–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–µ—Å—Å–∏–∏
    ck_id = uuid4().hex[:8]
    context.user_data["checklist_id"] = ck_id

    # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å: —Å–ø–∏—Å–æ–∫ –ø—É–Ω–∫—Ç–æ–≤ + —Å—Ç–∞—Ç—É—Å—ã (None / "done" / "skipped" / "ignored")
    items = CHECKLISTS[place][checklist_name]
    user_progress[ck_id] = {
        "place": place,
        "user": query.from_user.full_name,
        "title": f"{place} ‚Äî {checklist_name}",
        "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "items": items,
        "status": [None] * len(items),
        # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—É–¥–∞ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —á–µ–∫-–ª–∏—Å—Ç
        "chat_id": REPORT_CHAT_IDS.get(place),
        "message_id": None,
    }

    # 1) —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –õ–°, —á—Ç–æ —á–µ–∫-–ª–∏—Å—Ç —Å–æ–∑–¥–∞—ë—Ç—Å—è
    await query.edit_message_text(
        text="‚è≥ –í–∞—à —á–µ–∫-–ª–∏—Å—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∏ –≤—Å–∫–æ—Ä–µ –ø–æ—è–≤–∏—Ç—Å—è –≤ –æ–±—â–µ–º —á–∞—Ç–µ..."
    )

    # 2) –ø—É–±–ª–∏–∫—É–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –µ–≥–æ message_id
    chat_id = user_progress[ck_id]["chat_id"]
    sent = await context.bot.send_message(
        chat_id=chat_id,
        text=f"üìù *{user_progress[ck_id]['title']}*\n–ù–∞—á–∞—Ç–æ: {user_progress[ck_id]['timestamp']}\n\n(–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è‚Ä¶)",
        parse_mode="Markdown"
    )
    user_progress[ck_id]["message_id"] = sent.message_id

    # 3) —Å—Ä–∞–∑—É –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —á–µ–∫-–ª–∏—Å—Ç –≤ —Ç–æ–º –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–∏
    await send_checklist(context.bot, ck_id)
