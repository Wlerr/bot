# handlers/admin.py

import json
from uuid import uuid4
from datetime import datetime

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
)

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
from config.config import ADMIN_CHAT_ID, DYNAMIC_FILE, REPORT_CHAT_IDS
from utils.storage import CHECKLISTS, DYNAMIC, user_progress
from handlers.checklist import send_checklist

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
ASK_PLACE, ASK_TITLE, ASK_ITEMS, CONFIRM = range(4)

# –°–ø–∏—Å–æ–∫ Telegram user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π-—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π
ADMINS = {
    512193226,  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –≤–∞—à–∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
}


async def newchecklist_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —à–∞–±–ª–æ–Ω–∞.
    –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /newchecklist, —Ç–æ–ª—å–∫–æ –≤ –∞–¥–º–∏–Ω-—á–∞—Ç–µ.
    """
    """
    # 1) –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ –∞–¥–º–∏–Ω—Å–∫–æ–º —á–∞—Ç–µ
    if update.effective_chat.id != ADMIN_CHAT_ID:
        return
"""

    # 2) –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å ‚Äî –≤ —Å–ø–∏—Å–∫–µ ADMINS
    if update.effective_user.id not in ADMINS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return ConversationHandler.END

    # 3) –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —á–∞–π–Ω—É—é –∏–∑ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —à–∞–±–ª–æ–Ω–æ–≤
    keyboard = [
        [InlineKeyboardButton(place, callback_data=place)]
        for place in CHECKLISTS.keys()
    ]
    await update.message.reply_text(
        "üõ† –î–ª—è –∫–∞–∫–æ–π —á–∞–π–Ω–æ–π —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —á–µ–∫-–ª–∏—Å—Ç?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ASK_PLACE


async def ask_title(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —á–∞–π–Ω–æ–π: —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–µ–∫-–ª–∏—Å—Ç–∞.
    """
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —á–∞–π–Ω—É—é
    place = update.callback_query.data
    context.user_data["place"] = place

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤—ã–±–æ—Ä –∏ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
    await update.callback_query.answer()
    await update.callback_query.edit_message_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–µ–∫-–ª–∏—Å—Ç–∞:")
    return ASK_TITLE


async def ask_items(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è: —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—É–Ω–∫—Ç—ã.
    """
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
    title = update.message.text.strip()
    context.user_data["title"] = title

    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –≤–≤–æ–¥—É –ø—É–Ω–∫—Ç–æ–≤
    await update.message.reply_text(
        "üóí –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø—É–Ω–∫—Ç—ã —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É.\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "–ü—É–Ω–∫—Ç 1\n"
        "–ü—É–Ω–∫—Ç 2\n"
        "–ü—É–Ω–∫—Ç 3"
    )
    return ASK_ITEMS


async def confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏ –ø—Ä–æ—Å–∏–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ.
    """
    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ —Å—Ç—Ä–æ–∫–∞–º ‚Äî –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—É–Ω–∫—Ç–æ–≤
    items = [line.strip() for line in update.message.text.splitlines() if line.strip()]
    context.user_data["items"] = items

    # –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
    preview = "\n".join(f"‚Äì {item}" for item in items)
    await update.message.reply_text(
        f"–°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ–∫-–ª–∏—Å—Ç:\n\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: *{context.user_data['title']}*\n"
        f"–ß–∞–π–Ω–∞—è: *{context.user_data['place']}*\n\n"
        f"{preview}\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ /yes –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ /no",
        parse_mode="Markdown"
    )
    return CONFIRM


async def save_dynamic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω –≤ dynamic.json.
    """
    text = update.message.text.strip().lower()
    if text != "/yes":
        await update.message.reply_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return ConversationHandler.END

    # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
    new_id = uuid4().hex[:8]
    entry = {
        "id": new_id,
        "place": context.user_data["place"],
        "title": context.user_data["title"],
        "items": context.user_data["items"],
    }
    DYNAMIC.append(entry)

    # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª dynamic.json
    with open(DYNAMIC_FILE, "w", encoding="utf-8") as f:
        json.dump(DYNAMIC, f, ensure_ascii=False, indent=2)

    await update.message.reply_text(
        f"‚úÖ –®–∞–±–ª–æ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –ï–≥–æ ID: `{new_id}`",
        parse_mode="Markdown"
    )
    return ConversationHandler.END


async def publish(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–æ–º–∞–Ω–¥–∞ /publish <ID> –ø—É–±–ª–∏–∫—É–µ—Ç –≥–æ—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç.
    """
    # 1) –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Ç –∏ –ø—Ä–∞–≤–∞
    if update.effective_chat.id != ADMIN_CHAT_ID:
        return
    if update.effective_user.id not in ADMINS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return

    # 2) –†–∞–∑–±–æ—Ä –∫–æ–º–∞–Ω–¥—ã
    parts = update.message.text.split()
    if len(parts) != 2:
        return await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /publish <ID>")

    tpl = next((d for d in DYNAMIC if d["id"] == parts[1]), None)
    if not tpl:
        return await update.message.reply_text("‚ùå –®–∞–±–ª–æ–Ω —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    # 3) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏ —Å–æ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º —á–µ–∫-–ª–∏—Å—Ç–æ–º
    ck_id = uuid4().hex[:8]
    user_progress[ck_id] = {
        "place": tpl["place"],
        "user": update.effective_user.full_name,
        "title": tpl["title"],
        "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "items": tpl["items"],
        "status": [None] * len(tpl["items"]),
        "chat_id": REPORT_CHAT_IDS[tpl["place"]],
        "message_id": None
    }

    # 4) –ü—É–±–ª–∏–∫—É–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —á–µ–∫-–ª–∏—Å—Ç
    sent = await update.message.reply_text(
        f"üìù *{tpl['title']}*",
        parse_mode="Markdown"
    )
    user_progress[ck_id]["message_id"] = sent.message_id

    # 5) –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏ –ø—É–Ω–∫—Ç—ã
    await send_checklist(context.bot, ck_id)


# ConversationHandler –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞
conv = ConversationHandler(
    entry_points=[CommandHandler("newchecklist", newchecklist_start)],

    states={
        ASK_PLACE: [CallbackQueryHandler(ask_title)],
        ASK_TITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_items)],
        ASK_ITEMS: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm)],
        CONFIRM:  [MessageHandler(filters.Regex("^(?:/yes|/no)$"), save_dynamic)],
    },

    # –ö–æ–º–∞–Ω–¥–∞ /cancel –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä
    fallbacks=[CommandHandler("cancel", lambda u, c: ConversationHandler.END)],

    allow_reentry=True  # –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–Ω–æ–≤–æ –≤–æ–π—Ç–∏ –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä
)
