# handlers/admin.py

import json
from uuid import uuid4
from datetime import datetime

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
)

from config.config import ADMIN_CHAT_ID, DYNAMIC_FILE, REPORT_CHAT_IDS
from utils.storage import CHECKLISTS, DYNAMIC, user_progress
from handlers.checklist import send_checklist

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
ASK_PLACE, ASK_TITLE, ASK_ITEMS, CONFIRM = range(4)

# Telegram user_id –∞–¥–º–∏–Ω–æ–≤, –∫–æ—Ç–æ—Ä—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å —á–µ–∫-–ª–∏—Å—Ç—ã
ADMINS = {512193226, 987654321}  # <-- –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π


async def newchecklist_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # 1) –¢–æ–ª—å–∫–æ –≤ –≤–∞—à–µ–º –∞–¥–º–∏–Ω-—á–∞—Ç–µ
    if update.effective_chat.id != ADMIN_CHAT_ID:
        return

    # 2) –¢–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    user_id = update.effective_user.id
    if user_id not in ADMINS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ —Å–æ–∑–¥–∞–≤–∞—Ç—å —á–µ–∫-–ª–∏—Å—Ç—ã.")
        return ConversationHandler.END

    # 3) –ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–ª–æ–≥: –≤—ã–±–æ—Ä —á–∞–π–Ω–æ–π
    keyboard = [
        [InlineKeyboardButton(place, callback_data=place)]
        for place in CHECKLISTS.keys()
    ]
    await update.message.reply_text(
        "üõ† –î–ª—è –∫–∞–∫–æ–π —á–∞–π–Ω–æ–π —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —á–µ–∫-–ª–∏—Å—Ç?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ASK_PLACE


async def ask_title(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ò –∑–¥–µ—Å—å –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω-—á–∞—Ç –∏ –ø—Ä–∞–≤–∞ –µ—â—ë —Ä–∞–∑ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    if update.effective_chat.id != ADMIN_CHAT_ID or update.effective_user.id not in ADMINS:
        return ConversationHandler.END

    context.user_data["place"] = update.callback_query.data
    await update.callback_query.answer()
    await update.callback_query.edit_message_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–µ–∫-–ª–∏—Å—Ç–∞:")
    return ASK_TITLE


async def ask_items(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
    if update.effective_chat.id != ADMIN_CHAT_ID or update.effective_user.id not in ADMINS:
        return ConversationHandler.END

    context.user_data["title"] = update.message.text.strip()
    await update.message.reply_text(
        "üóí –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø—É–Ω–∫—Ç—ã —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É.\n"
        "–ü—Ä–∏–º–µ—Ä:\n–ü—É–Ω–∫—Ç 1\n–ü—É–Ω–∫—Ç 2\n‚Ä¶"
    )
    return ASK_ITEMS


async def confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
    if update.effective_chat.id != ADMIN_CHAT_ID or update.effective_user.id not in ADMINS:
        return ConversationHandler.END

    items = [line.strip() for line in update.message.text.splitlines() if line.strip()]
    context.user_data["items"] = items

    preview = "\n".join(f"‚Äì {i}" for i in items)
    await update.message.reply_text(
        f"–°–æ—Ö—Ä–∞–Ω–∏–º —á–µ–∫-–ª–∏—Å—Ç ¬´{context.user_data['title']}¬ª –¥–ª—è "
        f"{context.user_data['place']}:\n\n{preview}\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ /yes –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ /no",
        parse_mode="Markdown"
    )
    return CONFIRM


async def save_dynamic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–æ –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    if update.effective_chat.id != ADMIN_CHAT_ID or update.effective_user.id not in ADMINS:
        return ConversationHandler.END

    if update.message.text.strip().lower() != "/yes":
        await update.message.reply_text("‚ùå –û—Ç–º–µ–Ω–∞.")
        return ConversationHandler.END

    new_id = uuid4().hex[:8]
    entry = {
        "id":    new_id,
        "place": context.user_data["place"],
        "title": context.user_data["title"],
        "items": context.user_data["items"],
    }
    DYNAMIC.append(entry)
    with open(DYNAMIC_FILE, "w", encoding="utf-8") as f:
        json.dump(DYNAMIC, f, ensure_ascii=False, indent=2)

    await update.message.reply_text(f"‚úÖ –®–∞–±–ª–æ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –ï–≥–æ ID: `{new_id}`", parse_mode="Markdown")
    return ConversationHandler.END


async def publish(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –¢–æ–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∏ —á–∞—Ç
    if update.effective_chat.id != ADMIN_CHAT_ID:
        return
    if update.effective_user.id not in ADMINS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return

    parts = update.message.text.split()
    if len(parts) != 2:
        return await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /publish <ID>")

    tpl = next((d for d in DYNAMIC if d["id"] == parts[1]), None)
    if not tpl:
        return await update.message.reply_text("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    ck_id = uuid4().hex[:8]
    user_progress[ck_id] = {
        "place": tpl["place"],
        "user": update.effective_user.full_name,
        "title": tpl["title"],
        "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "items": tpl["items"],
        "status": [None] * len(tpl["items"]),
        "chat_id": REPORT_CHAT_IDS[tpl["place"]],
        "message_id": None
    }

    sent = await update.message.reply_text(f"üìù *{tpl['title']}*", parse_mode="Markdown")
    user_progress[ck_id]["message_id"] = sent.message_id
    await send_checklist(context.bot, ck_id)


conv = ConversationHandler(
    entry_points=[CommandHandler("newchecklist", newchecklist_start)],
    states={
        ASK_PLACE: [CallbackQueryHandler(ask_title)],
        ASK_TITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_items)],
        ASK_ITEMS: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm)],
        CONFIRM:  [MessageHandler(filters.Regex("^(?:/yes|/no)$"), save_dynamic)],
    },
    fallbacks=[CommandHandler("cancel", lambda u, c: ConversationHandler.END)],
    allow_reentry=True
)
