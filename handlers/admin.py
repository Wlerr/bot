# handlers/admin.py

import json
import re
from uuid import uuid4
from datetime import datetime

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
)

from config.config import ADMIN_CHAT_ID, DYNAMIC_FILE, REPORT_CHAT_IDS
from utils.storage import CHECKLISTS, DYNAMIC, user_progress
from handlers.checklist import send_checklist

# ConversationHandler —Å–æ—Å—Ç–æ—è–Ω–∏—è
ASK_PLACE, ASK_TITLE, ASK_ITEMS, ASK_ONE_TIME, CONFIRM = range(5)

# –°–ø–∏—Å–æ–∫ Telegram user_id –∞–¥–º–∏–Ω–æ–≤
ADMINS = {512193226, 987654321}  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID


# === –®–∞–≥ 1: –ó–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫-–ª–∏—Å—Ç–∞ ===
async def newchecklist_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != ADMIN_CHAT_ID:
        return

    if update.effective_user.id not in ADMINS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ —Å–æ–∑–¥–∞–≤–∞—Ç—å —á–µ–∫-–ª–∏—Å—Ç—ã.")
        return ConversationHandler.END

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä —á–∞–π–Ω–æ–π
    keyboard = [
        [InlineKeyboardButton(place, callback_data=place)]
        for place in CHECKLISTS.keys()
    ]
    await update.message.reply_text(
        "üõ† –î–ª—è –∫–∞–∫–æ–π —á–∞–π–Ω–æ–π —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —á–µ–∫-–ª–∏—Å—Ç?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ASK_PLACE


# === –®–∞–≥ 2: –í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è —á–µ–∫-–ª–∏—Å—Ç–∞ ===
async def ask_title(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != ADMIN_CHAT_ID or update.effective_user.id not in ADMINS:
        return ConversationHandler.END

    context.user_data["place"] = update.callback_query.data
    await update.callback_query.answer()
    await update.callback_query.edit_message_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–µ–∫-–ª–∏—Å—Ç–∞:")
    return ASK_TITLE


# === –®–∞–≥ 3: –í–≤–æ–¥ –ø—É–Ω–∫—Ç–æ–≤ —á–µ–∫-–ª–∏—Å—Ç–∞ ===
async def ask_items(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != ADMIN_CHAT_ID or update.effective_user.id not in ADMINS:
        return ConversationHandler.END

    context.user_data["title"] = update.message.text.strip()
    await update.message.reply_text(
        "üóí –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø—É–Ω–∫—Ç—ã —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É.\n"
        "–ü—Ä–∏–º–µ—Ä:\n–ü—É–Ω–∫—Ç 1\n–ü—É–Ω–∫—Ç 2\n‚Ä¶"
    )
    return ASK_ITEMS


# === –®–∞–≥ 4: –£—Ç–æ—á–Ω–µ–Ω–∏–µ ‚Äî –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –ª–∏ —á–µ–∫-–ª–∏—Å—Ç ===
async def ask_one_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != ADMIN_CHAT_ID or update.effective_user.id not in ADMINS:
        return ConversationHandler.END

    items = [line.strip() for line in update.message.text.splitlines() if line.strip()]
    if not items:
        await update.message.reply_text("‚ùå –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤.")
        return ConversationHandler.END

    context.user_data["items"] = items

    preview = "\n".join(f"‚Äì {item}" for item in items)
    await update.message.reply_text(
        f"‚úÖ –ß–µ–∫-–ª–∏—Å—Ç:\n*{context.user_data['title']}*\n\n{preview}\n\n"
        "–≠—Ç–æ—Ç —á–µ–∫-–ª–∏—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–º? –ù–∞–ø–∏—à–∏—Ç–µ `yes` –∏–ª–∏ `no`.",
        parse_mode="Markdown"
    )
    return ASK_ONE_TIME


# === –®–∞–≥ 5: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è ===
async def confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != ADMIN_CHAT_ID or update.effective_user.id not in ADMINS:
        return ConversationHandler.END

    response = update.message.text.strip().lower()
    if response not in ("yes", "no"):
        await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ 'yes' –∏–ª–∏ 'no'.")
        return ASK_ONE_TIME

    context.user_data["one_time"] = (response == "yes")

    preview = "\n".join(f"‚Äì {item}" for item in context.user_data["items"])
    await update.message.reply_text(
        f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ–∫-–ª–∏—Å—Ç *{context.user_data['title']}* "
        f"–¥–ª—è {context.user_data['place']}?\n"
        f"–û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π: {'–î–∞' if context.user_data['one_time'] else '–ù–µ—Ç'}\n\n"
        f"{preview}\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π /yes –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ /no",
        parse_mode="Markdown"
    )
    return CONFIRM


# === –§–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ–∫-–ª–∏—Å—Ç–∞ ===
async def save_dynamic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != ADMIN_CHAT_ID or update.effective_user.id not in ADMINS:
        return ConversationHandler.END

    if update.message.text.strip().lower() != "/yes":
        await update.message.reply_text("‚ùå –û—Ç–º–µ–Ω–∞.")
        return ConversationHandler.END

    new_id = uuid4().hex[:8]
    entry = {
        "id": new_id,
        "place": context.user_data["place"],
        "title": context.user_data["title"],
        "items": context.user_data["items"],
        "one_time": context.user_data.get("one_time", False)
    }
    DYNAMIC.append(entry)

    with open(DYNAMIC_FILE, "w", encoding="utf-8") as f:
        json.dump(DYNAMIC, f, ensure_ascii=False, indent=2)

    await update.message.reply_text(f"‚úÖ –ß–µ–∫-–ª–∏—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –ï–≥–æ ID: `{new_id}`", parse_mode="Markdown")
    return ConversationHandler.END


# === –ö–æ–º–∞–Ω–¥–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —á–µ–∫-–ª–∏—Å—Ç–∞ –ø–æ ID ===
async def publish(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != ADMIN_CHAT_ID or update.effective_user.id not in ADMINS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return

    parts = update.message.text.strip().split()
    if len(parts) != 2:
        return await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /publish <ID>")

    tpl_id = parts[1]
    tpl = next((d for d in DYNAMIC if d["id"] == tpl_id), None)

    if not tpl:
        return await update.message.reply_text("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    ck_id = uuid4().hex[:8]
    user_progress[ck_id] = {
        "place": tpl["place"],
        "user": update.effective_user.full_name,
        "title": tpl["title"],
        "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "items": tpl["items"],
        "status": [None] * len(tpl["items"]),
        "chat_id": REPORT_CHAT_IDS[tpl["place"]],
        "message_id": None
    }

    sent = await update.message.reply_text(f"üìù *{tpl['title']}*", parse_mode="Markdown")
    user_progress[ck_id]["message_id"] = sent.message_id
    await send_checklist(context.bot, ck_id)


# === ConversationHandler ===
conv = ConversationHandler(
    entry_points=[CommandHandler("newchecklist", newchecklist_start)],
    states={
        ASK_PLACE:    [CallbackQueryHandler(ask_title)],
        ASK_TITLE:    [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_items)],
        ASK_ITEMS:    [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_one_time)],
        ASK_ONE_TIME: [MessageHandler(filters.Regex("(?i)^(yes|no)$"), confirm)],
        CONFIRM:      [MessageHandler(filters.Regex("(?i)^/(yes|no)$"), save_dynamic)],
    },
    fallbacks=[CommandHandler("cancel", lambda u, c: ConversationHandler.END)],
    allow_reentry=True
)
